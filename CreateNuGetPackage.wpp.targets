<?xml version="1.0" encoding="utf-8"?>

<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\ExtensionPack\4.0\MSBuild.ExtensionPack.tasks" />
  <!--<PropertyGroup>
    <Publish>false</Publish>
    <NuGetUrl>http://appserver/Nuget/</NuGetUrl>
  </PropertyGroup>-->
  <Target Name="CreateNuGetPackage">
    <PropertyGroup>
      <ComponentBaseVersion>0.0.0</ComponentBaseVersion>
      <SolutionDir Condition="'$(SolutionDir)' == '*Undefined*'">$(ProjectDir)..\</SolutionDir>
      <SolutionDir Condition="'$(SolutionDir)' != '*Undefined*'">$(SolutionDir)</SolutionDir>
      <BinFolder Condition="'$(OutDir)' != 'bin\$(Configuration)\'" >$(OutDir)</BinFolder>
      <BinFolder Condition="'$(OutDir)' == 'bin\$(Configuration)\'" >$(MSBuildProjectDirectory)\$(OutDir)</BinFolder>
    </PropertyGroup>
    <Message Text="BinFolder:$(BinFolder)" />
    <Message Text="SolutionDir:$(SolutionDir)" />
    <Message Text="MSBuildProjectDirectory:$(MSBuildProjectDirectory)" />
    <Message Text="Config:$(Configuration)" />
    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="ReadAttribute" File="$(SolutionDir)\version.xml"
                                           XPath="/Versions/Version[last()]/@number" Condition="Exists('$(SolutionDir)\version.xml')">
      <Output PropertyName="ComponentBaseVersion" TaskParameter="Value" />
    </MSBuild.ExtensionPack.Xml.XmlFile>
    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="ReadElements" ReadChildrenToMetadata="true" File="$(SolutionDir)\version.xml"
                                       XPath="/Versions/Version[last()]" Condition="Exists('$(SolutionDir)\version.xml')">
      <Output ItemName="ReleaseNotesList" TaskParameter="Elements" />
    </MSBuild.ExtensionPack.Xml.XmlFile>
    <CreateItem Include="%(ReleaseNotesList.ReleaseNotes)">
      <Output TaskParameter="Include" ItemName="ReleaseNotesSection"/>
    </CreateItem>
    <PropertyGroup>
      <ReleaseNotesText>@(ReleaseNotesSection, '')</ReleaseNotesText>
    </PropertyGroup>
    <Message Text="ReleaseNotesText: $(ReleaseNotesText)" />

    <CreateItem Include="$(MSBuildProjectDirectory)\NuGetPackage.nuspec">
      <Output TaskParameter="Include" ItemName="NuspecFile" />
    </CreateItem>
    <Message Text="NuspecFile:@(NuspecFile)" />

    <!-- Seems pretty much impossible to include release notes via command line, so we'll just update the nuspec directly on build. -->
    <ItemGroup>
      <Namespaces Include="NuSpecNamespace">
        <Prefix>x</Prefix>
        <Uri>http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd</Uri>
      </Namespaces>
    </ItemGroup>
    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="UpdateElement" File="@(NuspecFile)"
                                   XPath="/x:package/x:metadata/x:releaseNotes" InnerText="$(ReleaseNotesText)" Namespaces="@(Namespaces)">
    </MSBuild.ExtensionPack.Xml.XmlFile>
    
    <!--Delete existing .nupkg files-->
    <CreateItem Include="$(MSBuildProjectDirectory)\*.nupkg">
      <Output TaskParameter="Include" ItemName="OldPackageFiles" />
    </CreateItem>
    <Delete Files="@(OldPackageFiles)" />
    <!--Create nupkg file-->
    <Exec WorkingDirectory="$(MSBuildProjectDirectory)" Command="..\.nuget\nuget.exe pack @(NuspecFile) -Properties version=$(ComponentBaseVersion);binfolder=$(BinFolder)" />
    <CreateItem Include="$(MSBuildProjectDirectory)\*.nupkg">
      <Output TaskParameter="Include" ItemName="PackageFile" />
    </CreateItem>
    <!--If Publish=true push package to server-->
    <!--<Exec WorkingDirectory="$(MSBuildProjectDirectory)" Command="nuget.exe push @(PackageFile) -ApiKey 123 -s $(NuGetUrl)" Condition="$(Publish)==true" />-->
  </Target>
</Project>

